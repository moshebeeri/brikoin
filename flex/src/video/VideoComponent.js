import React, { Component } from "react";
import Video from "twilio-video";
import { connect } from "react-redux";
import { Card, CardText } from "material-ui/Card";
import { createToken } from "../redux/actions/video";
class VideoComponent extends Component {
  constructor(props) {
    super();
    this.state = {
      joined: false,
      joinedExternal: false,
      identity: null /* Will hold the fake name assigned to the client. The name is generated by faker on the server */,
      roomName: "" /* Will store the room name */,
      roomNameErr: false /* Track error for room name TextField. This will    enable us to show an error message when this letiable is true */,
      previewTracks: null,
      localMediaAvailable: false /* Represents the availability of a LocalAudioTrack(microphone) and a LocalVideoTrack(camera) */,
      hasJoinedRoom: false,
      activeRoom: null // Track the current active room
    };
    this.joinRoom = this.joinRoom.bind(this);
    this.handleRoomNameChange = this.handleRoomNameChange.bind(this);
    this.roomJoined = this.roomJoined.bind(this);
    this.leaveRoom = this.leaveRoom.bind(this);
    this.detachTracks = this.detachTracks.bind(this);
    this.detachParticipantTracks = this.detachParticipantTracks.bind(this);
  }

  render() {
    /*
         Controls showing of the local track
         Only show video track after user has joined a room else show nothing
        */
    let showLocalTrack = this.state.localMediaAvailable ? (
      <div className="flex-item">
        <div ref="localMedia" />{" "}
      </div>
    ) : (
      ""
    );
    /*
         Controls showing of ‘Join Room’ or ‘Leave Room’ button.
         Hide 'Join Room' button if user has already joined a room otherwise
         show `Leave Room` button.
        */
    // let joinOrLeaveRoomButton = this.state.hasJoinedRoom ? (
    //
    //   <RaisedButton label='hangout call' secondary onClick={this.leaveRoom} />
    //     ) : (
    //       <RaisedButton label={this.props.role === 'Customer' ? 'Call banker' : 'Answer Customer'}primary onClick={this.joinRoom} />)
    return (
      <div style={{ width: 400, height: 400 }}>
        <Card style={{ width: 400, height: 400 }}>
          <CardText>
            <div className="flex-container">
              {showLocalTrack} {/* Show local track if available */}
              <div className="flex-item">
                <br />
              </div>
              <div className="flex-item" ref="remoteMedia" id="remote-media" />
            </div>
          </CardText>
        </Card>
      </div>
    );
  }

  handleRoomNameChange(e) {
    /* Fetch room name from text field and update state */
    let roomName = e.target.value;
    this.setState({ roomName });
  }

  detachTracks(tracks) {
    tracks.forEach(track => {
      track.detach().forEach(detachedElement => {
        detachedElement.remove();
      });
    });
  }

  detachParticipantTracks(participant) {
    let tracks = Array.from(participant.tracks.values());
    this.detachTracks(tracks);
  }

  joinRoom(room) {
    console.log("Joining room '" + room + "'...");
    let connectOptions = {
      name: room,
      video: { width: 50, height: 50 }
    };

    if (this.state.previewTracks) {
      connectOptions.tracks = this.state.previewTracks;
    }

    /*
Connect to a room by providing the token and connection    options that include the room name and tracks. We also show an alert if an error occurs while connecting to the room.
*/

    if (this.props.videoToken) {
      Video.connect(this.props.videoToken, connectOptions).then(
        this.roomJoined,
        error => {
          alert("Could not connect to Twilio: " + error.message);
        }
      );
    }
  }

  componentDidMount() {
    this.props.createToken("banker");
  }

  componentDidUpdate() {
    const { room, externalRoom, chatType } = this.props;

    if (!this.state.joinedExternal && externalRoom && chatType === "video") {
      this.joinRoom(externalRoom);
      this.setState({ joinedExternal: true });
      return;
    }

    if (this.state.joinedExternal && !externalRoom) {
      this.setState({ joinedExternal: false });
      this.leaveRoom();
      return;
    }

    if (!this.state.joined && room) {
      this.joinRoom(room);
      this.setState({ joined: true });
    }

    if (this.state.joined && !room) {
      this.setState({ joined: false });
      this.leaveRoom();
    }
  }

  componentWillUnmount() {
    this.leaveRoom();
  }

  attachTracks(tracks, container) {
    tracks.forEach(track => {
      container.appendChild(track.attach());
    });
  }

  // Attach the Participant's Tracks to the DOM.
  attachParticipantTracks(participant, container) {
    let tracks = Array.from(participant.tracks.values());
    this.attachTracks(tracks, container);
  }

  roomJoined(room) {
    // Called when a participant joins a room
    console.log("Joined as '" + this.state.identity + "'");
    this.setState({
      activeRoom: room,
      localMediaAvailable: true,
      hasJoinedRoom: true // Removes ‘Join Room’ button and shows ‘Leave Room’
    });

    // Attach LocalParticipant's tracks to the DOM, if not already attached.
    const previewContainer = this.refs.localMedia;
    if (previewContainer && !previewContainer.querySelector("video")) {
      this.attachParticipantTracks(room.localParticipant, previewContainer);
    }
    // ... more event listeners

    // Attach the Tracks of the room's participants.
    room.participants.forEach(participant => {
      console.log("Already in Room: '" + participant.identity + "'");
      const previewContainer = this.refs.remoteMedia;
      this.attachParticipantTracks(participant, previewContainer);
    });

    // Participant joining room
    room.on("participantConnected", participant => {
      console.log("Joining: '" + participant.identity + "'");
    });

    // Attach participant’s tracks to DOM when they add a track
    room.on("trackAdded", (track, participant) => {
      console.log(participant.identity + " added track: " + track.kind);
      let previewContainer = this.refs.remoteMedia;
      this.attachTracks([track], previewContainer);
    });

    // Detach participant’s track from DOM when they remove a track.
    room.on("trackRemoved", (track, participant) => {
      this.detachTracks([track]);
    });

    // Detach all participant’s track when they leave a room.
    room.on("participantDisconnected", participant => {
      console.log("Participant '" + participant.identity + "' left the room");
      this.detachParticipantTracks(participant);
    });

    // Once the local participant leaves the room, detach the Tracks
    // of all other participants, including that of the LocalParticipant.
    room.on("disconnected", () => {
      if (this.state.previewTracks) {
        this.state.previewTracks.forEach(track => {
          track.stop();
        });
      }
      this.detachParticipantTracks(room.localParticipant);
      room.participants.forEach(this.detachParticipantTracks);
      if (this.state.activeRoom) {
        this.state.activeRoom.disconnect();
      }
      this.state.activeRoom = null;
      this.setState({ hasJoinedRoom: false, localMediaAvailable: false });
    });
  }

  leaveRoom() {
    if (this.state.activeRoom) {
      this.state.activeRoom.disconnect();
      this.setState({ hasJoinedRoom: false, localMediaAvailable: false });
    }
  }
}

const mapStateToProps = (state, props) => ({
  videoToken: state.video.videoToken,
  room: state.video.room,
  clientId: state.video.clientId
});

const mapDispatchToProps = {
  createToken
};
export default connect(mapStateToProps, mapDispatchToProps)(VideoComponent);
